function showAlert(executionContext, alertText, title, alertHeight, alertWidth) {
        return new Promise((resolve, reject) => {
            const alertStrings = {
                text: alertText,
                title: title
            };

            const alertOptions = { height: alertHeight, width: alertWidth };
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions)
                .then(success => {
                    resolve(success);
                })
                .catch(error => {
                    console.log("Error in closing dialog", error);
                    reject(error);
                });
        });
    }

VETHOME.Shared.Functions.showAlert(executionContext, alertText, title, alertHeight, alertWidth)

 //Alert with only Cancel/OK button
    function showOkCancelAlert(executionContext, title, alertText, alertHeight, alertWidth) {
        var confirmStrings = {
            title: title,
            text: alertText            
        };
        var confirmOptions = { height: alertHeight, width: alertWidth };
        args.preventDefault();

        Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
            function(success) {							
                if (success.confirmed) {
                    formContext.data.save();
                    formContext.ui.close();
                }
            }
        );
    }

//sdasdsad
function showOkCancelAlert(executionContext, title, alertText, alertHeight, alertWidth) {
    return new Promise((resolve, reject) => {
        const confirmStrings = {
            title: title,
            text: alertText
        };

        const confirmOptions = { height: alertHeight, width: alertWidth };

        Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
            function (success) {
                if (success.confirmed) {
                    // Perform actions when "OK" is clicked
                    resolve();
                } else {
                    // Perform actions when "Cancel" is clicked or the dialog is closed
                    reject("Operation canceled");
                }
            }
        ).catch(error => {
            console.log("Error in opening confirm dialog", error);
            reject(error);
        });
    });
}

function handleButtonClick(executionContext) {
    // Pass in the required parameters
    const title = "Confirmation";
    const alertText = "Are you sure you want to save?";
    const alertHeight = 200;
    const alertWidth = 400;

    // Call the showOkCancelAlert function
    showOkCancelAlert(executionContext, title, alertText, alertHeight, alertWidth)
        .then(() => {
            // This block will execute when "OK" is clicked
            console.log("User clicked OK. Saving data...");
            
            // Assuming 'formContext' is accessible in this scope
            formContext.data.save();
            formContext.ui.close();
        })
        .catch(error => {
            // This block will execute when "Cancel" is clicked or there's an error
            console.error("Operation canceled or an error occurred:", error);
        });
}

//test
function confirmSaveAndClose(executionContext) {
	var formContext = executionContext.getFormContext();
	var args = executionContext.getEventArgs();   

	if (args.getSaveMode() === 2) {
		if (Microsoft.Apm && formContext.ui.getFormType() !== VETHOME.Task.Constants.CREATE_FORM) {
			Microsoft.Apm.getFocusedSession().getContext().then(function (context) {
				var entityName = context.parameters["anchor.entityName"];
				if (entityName && entityName === "mcs_vethometasks") {
					var confirmStrings = {
						text: "The selected action will close the session along with its related tab(s).",
						title: "WARNING!"
					};
					var confirmOptions = { height: 200, width: 300 };
					args.preventDefault();

					Xrm.Navigation.openConfirmDialog(confirmStrings, confirmOptions).then(
						function(success) {							
							if (success.confirmed) {
								formContext.data.save();
                                formContext.ui.close();                                		
							}
						}
					);
				}
			});
		}
	}
}
